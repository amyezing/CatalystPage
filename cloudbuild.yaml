options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # --- DEBUG STRUCTURE ---
  - name: 'gradle:8.8-jdk17'
    id: 'debug-structure'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== Finding backend source code ==="
        find . -name "DbConnection.kt" -o -name "Application.kt" -o -name "Hikari*" 2>/dev/null
        echo "=== All source directories ==="
        find . -type d -name "src" | grep -v node_modules
        echo "=== Build outputs ==="
        find . -name "*.jar" -type f

  # --- BACKEND BUILD ---
  - name: 'gradle:8.8-jdk17'
    id: 'build-backend'
    waitFor: ['debug-structure']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        chmod +x ./gradlew
        # Try different JVM build commands
        ./gradlew :site:jvmJar --no-daemon || \
        ./gradlew :site:jvmMainClasses --no-daemon || \
        ./gradlew :site:compileKotlinJvm --no-daemon || \
        ./gradlew :site:build --no-daemon
        
        echo "=== JAR files created ==="
        find . -name "*.jar" -type f

  # Build Backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend-image'
    waitFor: ['build-backend']
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/catalyst-backend:$COMMIT_SHA',
      '-f', 'Dockerfile.backend',
      '.'
    ]

  # --- FRONTEND BUILD ---
  - name: 'gradle:8.8-jdk17'
    id: 'build-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && \
        apt-get install -y curl && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
        apt-get install -y nodejs && \
        chmod +x ./gradlew && \
        ./gradlew :site:build --no-daemon

  # Build Frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend-image'
    waitFor: ['build-frontend']
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA',
      '-f', 'Dockerfile.frontend',
      '.'
    ]

  # --- PUSH IMAGES ---
  # Push Backend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    waitFor: ['build-backend-image']
    args: ['push', 'gcr.io/$PROJECT_ID/catalyst-backend:$COMMIT_SHA']

  # Push Frontend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    waitFor: ['build-frontend-image']
    args: ['push', 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA']

  # --- DEPLOY SERVICES ---
  # Deploy Backend
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    waitFor: ['push-backend']
    args: [
      'run', 'deploy', 'catalyst-backend',
      '--image', 'gcr.io/$PROJECT_ID/catalyst-backend:$COMMIT_SHA',
      '--region', 'asia-southeast1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '8080',
      '--set-env-vars', 'SPRING_PROFILES_ACTIVE=prod'
    ]

  # Deploy Frontend
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend'
    waitFor: ['push-frontend']
    args: [
      'run', 'deploy', 'catalyst-frontend',
      '--image', 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA',
      '--region', 'asia-southeast1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '8080'
    ]

images:
  - 'gcr.io/$PROJECT_ID/catalyst-backend:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA'
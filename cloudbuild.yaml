options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # --- BACKEND BUILD ---
  - name: 'gradle:8.8-jdk17'
    id: 'build-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        chmod +x ./gradlew
        ./gradlew :site:build --no-daemon
        
        echo "=== ALL JAR FILES ==="
        find . -name "*.jar" -type f
        
        echo "=== Checking Kobweb system directory ==="
        ls -la /app/site/.kobweb/site/system/ || echo "Kobweb system directory not found"
        
        echo "=== Checking if Kobweb JAR exists ==="
        ls -la /app/site/.kobweb/site/system/com.jar || echo "Kobweb JAR not found"
        

  # Build Backend Docker image
  - name: 'gradle:8.8-jdk17'
    id: 'build-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        chmod +x ./gradlew
        ./gradlew :site:build --no-daemon

        echo "=== ALL JAR FILES ==="
        find . -name "*.jar" -type f

        echo "=== Checking JAR manifests ==="
        for jar in $(find . -name "*.jar" -type f); do
          echo "=== $jar ==="
          jar tf "$jar" | grep -E "(META-INF/MANIFEST.MF|.class$)" | head -10 || echo "Cannot read JAR"
          echo "---"
        done

        echo "=== Checking Kobweb output structure ==="
        find .kobweb -type f -name "*.jar" 2>/dev/null || echo "No Kobweb JARs found"
        ls -la ./site/build/ || echo "No site build directory"
    ]

  # --- FRONTEND BUILD ---
  - name: 'gradle:8.8-jdk17'
    id: 'build-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && \
        apt-get install -y curl && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
        apt-get install -y nodejs && \
        chmod +x ./gradlew && \
        ./gradlew :site:build --no-daemon

  # Build Frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend-image'
    waitFor: ['build-frontend']
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA',
      '-f', 'Dockerfile.frontend',
      '.'
    ]

  # --- PUSH IMAGES ---
  # Push Backend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    waitFor: ['build-backend-image']
    args: ['push', 'gcr.io/$PROJECT_ID/catalyst-backend:$COMMIT_SHA']

  # Push Frontend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    waitFor: ['build-frontend-image']
    args: ['push', 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA']

  # --- DEPLOY SERVICES ---
    # Deploy Backend
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    waitFor: ['push-backend']
    args: [
      'run', 'deploy', 'catalyst-backend',
      '--image', 'gcr.io/$PROJECT_ID/catalyst-backend:$COMMIT_SHA',
      '--region', 'asia-southeast1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '8080',
      '--set-env-vars', 'DB_HOST=sm://$PROJECT_ID/db-connection-name,DB_PORT=3306,DB_NAME=catalystdb,DB_USER=sm://$PROJECT_ID/db-user,DB_PASS=sm://$PROJECT_ID/db-password,GCS_BUCKET_NAME=catalyst-cloud-storage,GCS_CREDENTIALS_PATH=,FIREBASE_CONFIG=sm://$PROJECT_ID/firebase-config',
      '--add-cloudsql-instances', 'ethereal-zodiac-454604-u2:asia-southeast1:catalyst-db'
    ]

  # Deploy Frontend
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend'
    waitFor: ['push-frontend']
    args: [
      'run', 'deploy', 'catalyst-frontend',
      '--image', 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA',
      '--region', 'asia-southeast1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '8080'
    ]

images:
  - 'gcr.io/$PROJECT_ID/catalyst-backend:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/catalyst-frontend:$COMMIT_SHA'